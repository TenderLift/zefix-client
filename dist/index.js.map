{"version":3,"sources":["../src/generated/core/bodySerializer.gen.ts","../src/generated/core/auth.gen.ts","../src/generated/core/pathSerializer.gen.ts","../src/generated/client/utils.gen.ts","../src/generated/client/client.gen.ts","../src/generated/client.gen.ts","../src/generated/sdk.gen.ts","../src/utils/node-or-worker.ts","../src/utils/type-guards.ts","../src/index.ts"],"names":["jsonBodySerializer","body","_key","value","getAuthToken","auth","callback","token","separatorArrayExplode","style","separatorArrayNoExplode","separatorObjectExplode","serializeArrayParam","allowReserved","explode","name","joinedValues","v","separator","serializePrimitiveParam","serializeObjectParam","valueOnly","values","key","PATH_PARAM_RE","defaultPathSerializer","path","_url","url","matches","match","replaceValue","createQuerySerializer","array","object","queryParams","search","serializedArray","serializedObject","serializedPrimitive","getParseAs","contentType","cleanContent","type","setAuthParams","security","options","buildUrl","getUrl","baseUrl","query","querySerializer","pathUrl","mergeConfigs","a","b","config","mergeHeaders","headers","mergedHeaders","header","iterator","Interceptors","id","index","fn","createInterceptors","defaultQuerySerializer","defaultHeaders","createConfig","override","createClient","_config","getConfig","setConfig","interceptors","request","opts","requestInit","_fetch","response","result","parseAs","data","textError","jsonError","error","finalError","client","get","byDate","list","byBfsCommunityId","list1","showUid","showEhraid","showChid","list2","toBase64","s","NodeBuffer","isZefixError","isCompany","isCompanyFull","isLegalForm","isBfsCommunity","extractErrorMessage","isActiveCompany","company","formatUid","uid","cleaned","isValidUid","SWISS_CANTONS","isValidCanton","canton","ZEFIX_LANGUAGES","isValidLanguage","lang","getDefaultLanguageForCanton","frenchCantons","lastRequestTime","currentAuth","throttleConfig","configureClient","throttle","customFetch","clientConfig","req","credentials","timeSinceLastRequest","minInterval","resolve","setAuth","ZefixError","status","code","message","redacted","ensureOk","res"],"mappings":"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","file":"index.js","sourcesContent":["import type { ArrayStyle, ObjectStyle, SerializerOptions } from './pathSerializer.gen';\n\nexport type QuerySerializer = (query: Record<string, unknown>) => string;\n\nexport type BodySerializer = (body: any) => any;\n\nexport interface QuerySerializerOptions {\n  allowReserved?: boolean;\n  array?: SerializerOptions<ArrayStyle>;\n  object?: SerializerOptions<ObjectStyle>;\n}\n\nconst serializeFormDataPair = (data: FormData, key: string, value: unknown): void => {\n  if (typeof value === 'string' || value instanceof Blob) {\n    data.append(key, value);\n  } else {\n    data.append(key, JSON.stringify(value));\n  }\n};\n\nconst serializeUrlSearchParamsPair = (data: URLSearchParams, key: string, value: unknown): void => {\n  if (typeof value === 'string') {\n    data.append(key, value);\n  } else {\n    data.append(key, JSON.stringify(value));\n  }\n};\n\nexport const formDataBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\n    body: T,\n  ): FormData => {\n    const data = new FormData();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeFormDataPair(data, key, v));\n      } else {\n        serializeFormDataPair(data, key, value);\n      }\n    });\n\n    return data;\n  },\n};\n\nexport const jsonBodySerializer = {\n  bodySerializer: <T>(body: T): string =>\n    JSON.stringify(body, (_key, value) => (typeof value === 'bigint' ? value.toString() : value)),\n};\n\nexport const urlSearchParamsBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(body: T): string => {\n    const data = new URLSearchParams();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeUrlSearchParamsPair(data, key, v));\n      } else {\n        serializeUrlSearchParamsPair(data, key, value);\n      }\n    });\n\n    return data.toString();\n  },\n};\n","export type AuthToken = string | undefined;\n\nexport interface Auth {\n  /**\n   * Which part of the request do we use to send the auth?\n   *\n   * @default 'header'\n   */\n  in?: 'header' | 'query' | 'cookie';\n  /**\n   * Header or query parameter name.\n   *\n   * @default 'Authorization'\n   */\n  name?: string;\n  scheme?: 'basic' | 'bearer';\n  type: 'apiKey' | 'http';\n}\n\nexport const getAuthToken = async (\n  auth: Auth,\n  callback: ((auth: Auth) => Promise<AuthToken> | AuthToken) | AuthToken,\n): Promise<string | undefined> => {\n  const token = typeof callback === 'function' ? await callback(auth) : callback;\n\n  if (!token) {\n    return;\n  }\n\n  if (auth.scheme === 'bearer') {\n    return `Bearer ${token}`;\n  }\n\n  if (auth.scheme === 'basic') {\n    return `Basic ${btoa(token)}`;\n  }\n\n  return token;\n};\n","interface SerializeOptions<T> extends SerializePrimitiveOptions, SerializerOptions<T> {}\n\ninterface SerializePrimitiveOptions {\n  allowReserved?: boolean;\n  name: string;\n}\n\nexport interface SerializerOptions<T> {\n  /**\n   * @default true\n   */\n  explode: boolean;\n  style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n  value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'form':\n      return ',';\n    case 'pipeDelimited':\n      return '|';\n    case 'spaceDelimited':\n      return '%20';\n    default:\n      return ',';\n  }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nexport const serializeArrayParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n}: SerializeOptions<ArraySeparatorStyle> & {\n  value: unknown[];\n}) => {\n  if (!explode) {\n    const joinedValues = (\n      allowReserved ? value : value.map((v) => encodeURIComponent(v as string))\n    ).join(separatorArrayNoExplode(style));\n    switch (style) {\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      case 'simple':\n        return joinedValues;\n      default:\n        return `${name}=${joinedValues}`;\n    }\n  }\n\n  const separator = separatorArrayExplode(style);\n  const joinedValues = value\n    .map((v) => {\n      if (style === 'label' || style === 'simple') {\n        return allowReserved ? v : encodeURIComponent(v as string);\n      }\n\n      return serializePrimitiveParam({\n        allowReserved,\n        name,\n        value: v as string,\n      });\n    })\n    .join(separator);\n  return style === 'label' || style === 'matrix' ? separator + joinedValues : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n  allowReserved,\n  name,\n  value,\n}: SerializePrimitiveParam) => {\n  if (value === undefined || value === null) {\n    return '';\n  }\n\n  if (typeof value === 'object') {\n    throw new Error(\n      'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n    );\n  }\n\n  return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n  valueOnly,\n}: SerializeOptions<ObjectSeparatorStyle> & {\n  value: Record<string, unknown> | Date;\n  valueOnly?: boolean;\n}) => {\n  if (value instanceof Date) {\n    return valueOnly ? value.toISOString() : `${name}=${value.toISOString()}`;\n  }\n\n  if (style !== 'deepObject' && !explode) {\n    let values: string[] = [];\n    Object.entries(value).forEach(([key, v]) => {\n      values = [...values, key, allowReserved ? (v as string) : encodeURIComponent(v as string)];\n    });\n    const joinedValues = values.join(',');\n    switch (style) {\n      case 'form':\n        return `${name}=${joinedValues}`;\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      default:\n        return joinedValues;\n    }\n  }\n\n  const separator = separatorObjectExplode(style);\n  const joinedValues = Object.entries(value)\n    .map(([key, v]) =>\n      serializePrimitiveParam({\n        allowReserved,\n        name: style === 'deepObject' ? `${name}[${key}]` : key,\n        value: v as string,\n      }),\n    )\n    .join(separator);\n  return style === 'label' || style === 'matrix' ? separator + joinedValues : joinedValues;\n};\n","import { getAuthToken } from '../core/auth.gen';\nimport type { QuerySerializer, QuerySerializerOptions } from '../core/bodySerializer.gen';\nimport { jsonBodySerializer } from '../core/bodySerializer.gen';\nimport {\n  serializeArrayParam,\n  serializeObjectParam,\n  serializePrimitiveParam,\n} from '../core/pathSerializer.gen';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types.gen';\n\ninterface PathSerializer {\n  path: Record<string, unknown>;\n  url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n  let url = _url;\n  const matches = _url.match(PATH_PARAM_RE);\n  if (matches) {\n    for (const match of matches) {\n      let explode = false;\n      let name = match.substring(1, match.length - 1);\n      let style: ArraySeparatorStyle = 'simple';\n\n      if (name.endsWith('*')) {\n        explode = true;\n        name = name.substring(0, name.length - 1);\n      }\n\n      if (name.startsWith('.')) {\n        name = name.substring(1);\n        style = 'label';\n      } else if (name.startsWith(';')) {\n        name = name.substring(1);\n        style = 'matrix';\n      }\n\n      const value = path[name];\n\n      if (value === undefined || value === null) {\n        continue;\n      }\n\n      if (Array.isArray(value)) {\n        url = url.replace(match, serializeArrayParam({ explode, name, style, value }));\n        continue;\n      }\n\n      if (typeof value === 'object') {\n        url = url.replace(\n          match,\n          serializeObjectParam({\n            explode,\n            name,\n            style,\n            value: value as Record<string, unknown>,\n            valueOnly: true,\n          }),\n        );\n        continue;\n      }\n\n      if (style === 'matrix') {\n        url = url.replace(\n          match,\n          `;${serializePrimitiveParam({\n            name,\n            value: value as string,\n          })}`,\n        );\n        continue;\n      }\n\n      const replaceValue = encodeURIComponent(\n        style === 'label' ? `.${value as string}` : (value as string),\n      );\n      url = url.replace(match, replaceValue);\n    }\n  }\n  return url;\n};\n\nexport const createQuerySerializer = <T = unknown>({\n  allowReserved,\n  array,\n  object,\n}: QuerySerializerOptions = {}) => {\n  const querySerializer = (queryParams: T) => {\n    const search: string[] = [];\n    if (queryParams && typeof queryParams === 'object') {\n      for (const name in queryParams) {\n        const value = queryParams[name];\n\n        if (value === undefined || value === null) {\n          continue;\n        }\n\n        if (Array.isArray(value)) {\n          const serializedArray = serializeArrayParam({\n            allowReserved,\n            explode: true,\n            name,\n            style: 'form',\n            value,\n            ...array,\n          });\n          if (serializedArray) search.push(serializedArray);\n        } else if (typeof value === 'object') {\n          const serializedObject = serializeObjectParam({\n            allowReserved,\n            explode: true,\n            name,\n            style: 'deepObject',\n            value: value as Record<string, unknown>,\n            ...object,\n          });\n          if (serializedObject) search.push(serializedObject);\n        } else {\n          const serializedPrimitive = serializePrimitiveParam({\n            allowReserved,\n            name,\n            value: value as string,\n          });\n          if (serializedPrimitive) search.push(serializedPrimitive);\n        }\n      }\n    }\n    return search.join('&');\n  };\n  return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (contentType: string | null): Exclude<Config['parseAs'], 'auto'> => {\n  if (!contentType) {\n    // If no Content-Type header is provided, the best we can do is return the raw response body,\n    // which is effectively the same as the 'stream' option.\n    return 'stream';\n  }\n\n  const cleanContent = contentType.split(';')[0]?.trim();\n\n  if (!cleanContent) {\n    return;\n  }\n\n  if (cleanContent.startsWith('application/json') || cleanContent.endsWith('+json')) {\n    return 'json';\n  }\n\n  if (cleanContent === 'multipart/form-data') {\n    return 'formData';\n  }\n\n  if (\n    ['application/', 'audio/', 'image/', 'video/'].some((type) => cleanContent.startsWith(type))\n  ) {\n    return 'blob';\n  }\n\n  if (cleanContent.startsWith('text/')) {\n    return 'text';\n  }\n\n  return;\n};\n\nexport const setAuthParams = async ({\n  security,\n  ...options\n}: Pick<Required<RequestOptions>, 'security'> &\n  Pick<RequestOptions, 'auth' | 'query'> & {\n    headers: Headers;\n  }) => {\n  for (const auth of security) {\n    const token = await getAuthToken(auth, options.auth);\n\n    if (!token) {\n      continue;\n    }\n\n    const name = auth.name ?? 'Authorization';\n\n    switch (auth.in) {\n      case 'query':\n        if (!options.query) {\n          options.query = {};\n        }\n        options.query[name] = token;\n        break;\n      case 'cookie':\n        options.headers.append('Cookie', `${name}=${token}`);\n        break;\n      case 'header':\n      default:\n        options.headers.set(name, token);\n        break;\n    }\n\n    return;\n  }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n  const url = getUrl({\n    baseUrl: options.baseUrl as string,\n    path: options.path,\n    query: options.query,\n    querySerializer:\n      typeof options.querySerializer === 'function'\n        ? options.querySerializer\n        : createQuerySerializer(options.querySerializer),\n    url: options.url,\n  });\n  return url;\n};\n\nexport const getUrl = ({\n  baseUrl,\n  path,\n  query,\n  querySerializer,\n  url: _url,\n}: {\n  baseUrl?: string;\n  path?: Record<string, unknown>;\n  query?: Record<string, unknown>;\n  querySerializer: QuerySerializer;\n  url: string;\n}) => {\n  const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n  let url = (baseUrl ?? '') + pathUrl;\n  if (path) {\n    url = defaultPathSerializer({ path, url });\n  }\n  let search = query ? querySerializer(query) : '';\n  if (search.startsWith('?')) {\n    search = search.substring(1);\n  }\n  if (search) {\n    url += `?${search}`;\n  }\n  return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n  const config = { ...a, ...b };\n  if (config.baseUrl?.endsWith('/')) {\n    config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n  }\n  config.headers = mergeHeaders(a.headers, b.headers);\n  return config;\n};\n\nexport const mergeHeaders = (\n  ...headers: Array<Required<Config>['headers'] | undefined>\n): Headers => {\n  const mergedHeaders = new Headers();\n  for (const header of headers) {\n    if (!header || typeof header !== 'object') {\n      continue;\n    }\n\n    const iterator = header instanceof Headers ? header.entries() : Object.entries(header);\n\n    for (const [key, value] of iterator) {\n      if (value === null) {\n        mergedHeaders.delete(key);\n      } else if (Array.isArray(value)) {\n        for (const v of value) {\n          mergedHeaders.append(key, v as string);\n        }\n      } else if (value !== undefined) {\n        // assume object headers are meant to be JSON stringified, i.e. their\n        // content value in OpenAPI specification is 'application/json'\n        mergedHeaders.set(\n          key,\n          typeof value === 'object' ? JSON.stringify(value) : (value as string),\n        );\n      }\n    }\n  }\n  return mergedHeaders;\n};\n\ntype ErrInterceptor<Err, Res, Req, Options> = (\n  error: Err,\n  response: Res,\n  request: Req,\n  options: Options,\n) => Err | Promise<Err>;\n\ntype ReqInterceptor<Req, Options> = (request: Req, options: Options) => Req | Promise<Req>;\n\ntype ResInterceptor<Res, Req, Options> = (\n  response: Res,\n  request: Req,\n  options: Options,\n) => Res | Promise<Res>;\n\nclass Interceptors<Interceptor> {\n  _fns: (Interceptor | null)[];\n\n  constructor() {\n    this._fns = [];\n  }\n\n  clear() {\n    this._fns = [];\n  }\n\n  getInterceptorIndex(id: number | Interceptor): number {\n    if (typeof id === 'number') {\n      return this._fns[id] ? id : -1;\n    } else {\n      return this._fns.indexOf(id);\n    }\n  }\n  exists(id: number | Interceptor) {\n    const index = this.getInterceptorIndex(id);\n    return !!this._fns[index];\n  }\n\n  eject(id: number | Interceptor) {\n    const index = this.getInterceptorIndex(id);\n    if (this._fns[index]) {\n      this._fns[index] = null;\n    }\n  }\n\n  update(id: number | Interceptor, fn: Interceptor) {\n    const index = this.getInterceptorIndex(id);\n    if (this._fns[index]) {\n      this._fns[index] = fn;\n      return id;\n    } else {\n      return false;\n    }\n  }\n\n  use(fn: Interceptor) {\n    this._fns = [...this._fns, fn];\n    return this._fns.length - 1;\n  }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware<Req, Res, Err, Options> {\n  error: Pick<Interceptors<ErrInterceptor<Err, Res, Req, Options>>, 'eject' | 'use'>;\n  request: Pick<Interceptors<ReqInterceptor<Req, Options>>, 'eject' | 'use'>;\n  response: Pick<Interceptors<ResInterceptor<Res, Req, Options>>, 'eject' | 'use'>;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = <Req, Res, Err, Options>() => ({\n  error: new Interceptors<ErrInterceptor<Err, Res, Req, Options>>(),\n  request: new Interceptors<ReqInterceptor<Req, Options>>(),\n  response: new Interceptors<ResInterceptor<Res, Req, Options>>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n  allowReserved: false,\n  array: {\n    explode: true,\n    style: 'form',\n  },\n  object: {\n    explode: true,\n    style: 'deepObject',\n  },\n});\n\nconst defaultHeaders = {\n  'Content-Type': 'application/json',\n};\n\nexport const createConfig = <T extends ClientOptions = ClientOptions>(\n  override: Config<Omit<ClientOptions, keyof T> & T> = {},\n): Config<Omit<ClientOptions, keyof T> & T> => ({\n  ...jsonBodySerializer,\n  headers: defaultHeaders,\n  parseAs: 'auto',\n  querySerializer: defaultQuerySerializer,\n  ...override,\n});\n","import type { Client, Config, ResolvedRequestOptions } from './types.gen';\nimport {\n  buildUrl,\n  createConfig,\n  createInterceptors,\n  getParseAs,\n  mergeConfigs,\n  mergeHeaders,\n  setAuthParams,\n} from './utils.gen';\n\ntype ReqInit = Omit<RequestInit, 'body' | 'headers'> & {\n  body?: any;\n  headers: ReturnType<typeof mergeHeaders>;\n};\n\nexport const createClient = (config: Config = {}): Client => {\n  let _config = mergeConfigs(createConfig(), config);\n\n  const getConfig = (): Config => ({ ..._config });\n\n  const setConfig = (config: Config): Config => {\n    _config = mergeConfigs(_config, config);\n    return getConfig();\n  };\n\n  const interceptors = createInterceptors<Request, Response, unknown, ResolvedRequestOptions>();\n\n  const request: Client['request'] = async (options) => {\n    const opts = {\n      ..._config,\n      ...options,\n      fetch: options.fetch ?? _config.fetch ?? globalThis.fetch,\n      headers: mergeHeaders(_config.headers, options.headers),\n      serializedBody: undefined,\n    };\n\n    if (opts.security) {\n      await setAuthParams({\n        ...opts,\n        security: opts.security,\n      });\n    }\n\n    if (opts.requestValidator) {\n      await opts.requestValidator(opts);\n    }\n\n    if (opts.body && opts.bodySerializer) {\n      opts.serializedBody = opts.bodySerializer(opts.body);\n    }\n\n    // remove Content-Type header if body is empty to avoid sending invalid requests\n    if (opts.serializedBody === undefined || opts.serializedBody === '') {\n      opts.headers.delete('Content-Type');\n    }\n\n    const url = buildUrl(opts);\n    const requestInit: ReqInit = {\n      redirect: 'follow',\n      ...opts,\n      body: opts.serializedBody,\n    };\n\n    let request = new Request(url, requestInit);\n\n    for (const fn of interceptors.request._fns) {\n      if (fn) {\n        request = await fn(request, opts);\n      }\n    }\n\n    // fetch must be assigned here, otherwise it would throw the error:\n    // TypeError: Failed to execute 'fetch' on 'Window': Illegal invocation\n    const _fetch = opts.fetch!;\n    let response = await _fetch(request);\n\n    for (const fn of interceptors.response._fns) {\n      if (fn) {\n        response = await fn(response, request, opts);\n      }\n    }\n\n    const result = {\n      request,\n      response,\n    };\n\n    if (response.ok) {\n      if (response.status === 204 || response.headers.get('Content-Length') === '0') {\n        return opts.responseStyle === 'data'\n          ? {}\n          : {\n              data: {},\n              ...result,\n            };\n      }\n\n      const parseAs =\n        (opts.parseAs === 'auto'\n          ? getParseAs(response.headers.get('Content-Type'))\n          : opts.parseAs) ?? 'json';\n\n      let data: any;\n      switch (parseAs) {\n        case 'arrayBuffer':\n        case 'blob':\n        case 'formData':\n        case 'json':\n        case 'text':\n          data = await response[parseAs]();\n          break;\n        case 'stream':\n          return opts.responseStyle === 'data'\n            ? response.body\n            : {\n                data: response.body,\n                ...result,\n              };\n      }\n\n      if (parseAs === 'json') {\n        if (opts.responseValidator) {\n          await opts.responseValidator(data);\n        }\n\n        if (opts.responseTransformer) {\n          data = await opts.responseTransformer(data);\n        }\n      }\n\n      return opts.responseStyle === 'data'\n        ? data\n        : {\n            data,\n            ...result,\n          };\n    }\n\n    const textError = await response.text();\n    let jsonError: unknown;\n\n    try {\n      jsonError = JSON.parse(textError);\n    } catch {\n      // noop\n    }\n\n    const error = jsonError ?? textError;\n    let finalError = error;\n\n    for (const fn of interceptors.error._fns) {\n      if (fn) {\n        finalError = (await fn(error, response, request, opts)) as string;\n      }\n    }\n\n    finalError = finalError || ({} as string);\n\n    if (opts.throwOnError) {\n      throw finalError;\n    }\n\n    // TODO: we probably want to return error and improve types\n    return opts.responseStyle === 'data'\n      ? undefined\n      : {\n          error: finalError,\n          ...result,\n        };\n  };\n\n  return {\n    buildUrl,\n    connect: (options) => request({ ...options, method: 'CONNECT' }),\n    delete: (options) => request({ ...options, method: 'DELETE' }),\n    get: (options) => request({ ...options, method: 'GET' }),\n    getConfig,\n    head: (options) => request({ ...options, method: 'HEAD' }),\n    interceptors,\n    options: (options) => request({ ...options, method: 'OPTIONS' }),\n    patch: (options) => request({ ...options, method: 'PATCH' }),\n    post: (options) => request({ ...options, method: 'POST' }),\n    put: (options) => request({ ...options, method: 'PUT' }),\n    request,\n    setConfig,\n    trace: (options) => request({ ...options, method: 'TRACE' }),\n  };\n};\n","// This file is auto-generated by @hey-api/openapi-ts\n\nimport type { ClientOptions } from './types.gen';\nimport {\n  type Config,\n  type ClientOptions as DefaultClientOptions,\n  createClient,\n  createConfig,\n} from './client';\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig<T extends DefaultClientOptions = ClientOptions> = (\n  override?: Config<DefaultClientOptions & T>,\n) => Config<Required<DefaultClientOptions> & T>;\n\nexport const client = createClient(\n  createConfig<ClientOptions>({\n    baseUrl: 'https://www.zefix.admin.ch/ZefixPublicREST',\n  }),\n);\n","// This file is auto-generated by @hey-api/openapi-ts\n\nimport type { Options as ClientOptions, TDataShape, Client } from './client';\nimport type {\n  SearchData,\n  SearchResponses,\n  SearchErrors,\n  GetData,\n  GetResponses,\n  GetErrors,\n  ByDateData,\n  ByDateResponses,\n  ByDateErrors,\n  ListData,\n  ListResponses,\n  ListErrors,\n  ByBfsCommunityIdData,\n  ByBfsCommunityIdResponses,\n  ByBfsCommunityIdErrors,\n  List1Data,\n  List1Responses,\n  List1Errors,\n  ShowUidData,\n  ShowUidResponses,\n  ShowUidErrors,\n  ShowEhraidData,\n  ShowEhraidResponses,\n  ShowEhraidErrors,\n  ShowChidData,\n  ShowChidResponses,\n  ShowChidErrors,\n  List2Data,\n  List2Responses,\n  List2Errors,\n} from './types.gen';\nimport { client as _heyApiClient } from './client.gen';\n\nexport type Options<\n  TData extends TDataShape = TDataShape,\n  ThrowOnError extends boolean = boolean,\n> = ClientOptions<TData, ThrowOnError> & {\n  /**\n   * You can provide a client instance returned by `createClient()` instead of\n   * individual options. This might be also useful if you want to implement a\n   * custom client.\n   */\n  client?: Client;\n  /**\n   * You can pass arbitrary values through the `meta` object. This can be\n   * used to access values that aren't defined as part of the SDK function.\n   */\n  meta?: Record<string, unknown>;\n};\n\n/**\n * Search for companies registered in the commercial register by different parameters\n */\nexport const search = <ThrowOnError extends boolean = false>(\n  options: Options<SearchData, ThrowOnError>,\n) => {\n  return (options.client ?? _heyApiClient).post<SearchResponses, SearchErrors, ThrowOnError>({\n    security: [\n      {\n        scheme: 'basic',\n        type: 'http',\n      },\n    ],\n    url: '/api/v1/company/search',\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n  });\n};\n\n/**\n * Search publication in the SOGC by publication number (SOGC-ID)\n */\nexport const get = <ThrowOnError extends boolean = false>(\n  options: Options<GetData, ThrowOnError>,\n) => {\n  return (options.client ?? _heyApiClient).get<GetResponses, GetErrors, ThrowOnError>({\n    security: [\n      {\n        scheme: 'basic',\n        type: 'http',\n      },\n    ],\n    url: '/api/v1/sogc/{id}',\n    ...options,\n  });\n};\n\n/**\n * Search publications in the SOGC by publication date\n */\nexport const byDate = <ThrowOnError extends boolean = false>(\n  options: Options<ByDateData, ThrowOnError>,\n) => {\n  return (options.client ?? _heyApiClient).get<ByDateResponses, ByDateErrors, ThrowOnError>({\n    security: [\n      {\n        scheme: 'basic',\n        type: 'http',\n      },\n    ],\n    url: '/api/v1/sogc/bydate/{date}',\n    ...options,\n  });\n};\n\n/**\n * Get a list of the cantonal registries of commerce\n */\nexport const list = <ThrowOnError extends boolean = false>(\n  options?: Options<ListData, ThrowOnError>,\n) => {\n  return (options?.client ?? _heyApiClient).get<ListResponses, ListErrors, ThrowOnError>({\n    security: [\n      {\n        scheme: 'basic',\n        type: 'http',\n      },\n    ],\n    url: '/api/v1/registryOfCommerce',\n    ...options,\n  });\n};\n\n/**\n * Get the cantonal registry of commerce by the bfsId of a BfsCommunity\n */\nexport const byBfsCommunityId = <ThrowOnError extends boolean = false>(\n  options: Options<ByBfsCommunityIdData, ThrowOnError>,\n) => {\n  return (options.client ?? _heyApiClient).get<\n    ByBfsCommunityIdResponses,\n    ByBfsCommunityIdErrors,\n    ThrowOnError\n  >({\n    security: [\n      {\n        scheme: 'basic',\n        type: 'http',\n      },\n    ],\n    url: '/api/v1/registryOfCommerce/byBfsCommunityId/{id}',\n    ...options,\n  });\n};\n\n/**\n * Get a list of all legal forms and their codes\n */\nexport const list1 = <ThrowOnError extends boolean = false>(\n  options?: Options<List1Data, ThrowOnError>,\n) => {\n  return (options?.client ?? _heyApiClient).get<List1Responses, List1Errors, ThrowOnError>({\n    security: [\n      {\n        scheme: 'basic',\n        type: 'http',\n      },\n    ],\n    url: '/api/v1/legalForm',\n    ...options,\n  });\n};\n\n/**\n * Get detailed company info by UID\n */\nexport const showUid = <ThrowOnError extends boolean = false>(\n  options: Options<ShowUidData, ThrowOnError>,\n) => {\n  return (options.client ?? _heyApiClient).get<ShowUidResponses, ShowUidErrors, ThrowOnError>({\n    security: [\n      {\n        scheme: 'basic',\n        type: 'http',\n      },\n    ],\n    url: '/api/v1/company/uid/{id}',\n    ...options,\n  });\n};\n\n/**\n * Get detailed company info by EHRA-ID (Internal company unique ID used by federal registry of commerce)\n */\nexport const showEhraid = <ThrowOnError extends boolean = false>(\n  options: Options<ShowEhraidData, ThrowOnError>,\n) => {\n  return (options.client ?? _heyApiClient).get<ShowEhraidResponses, ShowEhraidErrors, ThrowOnError>(\n    {\n      security: [\n        {\n          scheme: 'basic',\n          type: 'http',\n        },\n      ],\n      url: '/api/v1/company/ehraid/{id}',\n      ...options,\n    },\n  );\n};\n\n/**\n * Get detailed company info by CH-Number (This number is no longer used in public)\n */\nexport const showChid = <ThrowOnError extends boolean = false>(\n  options: Options<ShowChidData, ThrowOnError>,\n) => {\n  return (options.client ?? _heyApiClient).get<ShowChidResponses, ShowChidErrors, ThrowOnError>({\n    security: [\n      {\n        scheme: 'basic',\n        type: 'http',\n      },\n    ],\n    url: '/api/v1/company/chid/{id}',\n    ...options,\n  });\n};\n\n/**\n * Get a list of the political communes and their number according to the swiss official commune register\n */\nexport const list2 = <ThrowOnError extends boolean = false>(\n  options?: Options<List2Data, ThrowOnError>,\n) => {\n  return (options?.client ?? _heyApiClient).get<List2Responses, List2Errors, ThrowOnError>({\n    security: [\n      {\n        scheme: 'basic',\n        type: 'http',\n      },\n    ],\n    url: '/api/v1/community',\n    ...options,\n  });\n};\n","/**\n * Portable base64 encoding that works in both Workers and Node.js\n */\nexport const toBase64 = (s: string): string => {\n  // Workers/Browser path\n  if (typeof btoa !== 'undefined') {\n    return btoa(s);\n  }\n\n  // Node.js path with runtime guard\n  try {\n    // Dynamic import to avoid bundler issues\n    // @ts-expect-error - Node.js specific code in ESM build\n    const { Buffer: NodeBuffer } = require('node:buffer');\n    if (typeof NodeBuffer !== 'undefined') {\n      return NodeBuffer.from(s, 'utf-8').toString('base64');\n    }\n  } catch {\n    // Fall through if Node buffer not available\n  }\n\n  throw new Error('No base64 encoding available in this environment');\n};\n","/**\n * Type guards and helper functions for ZEFIX API responses\n */\n\nimport type {\n  CompanyShort,\n  CompanyFull,\n  RestApiErrorResponse,\n  LegalForm,\n  BfsCommunity,\n} from '../generated/types.gen';\n\n/**\n * Check if a value is a ZEFIX error response\n */\nexport function isZefixError(value: unknown): value is RestApiErrorResponse {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    'error' in value &&\n    typeof (value as { error?: unknown }).error === 'object'\n  );\n}\n\n/**\n * Check if a value is a company object (short or full)\n */\nexport function isCompany(value: unknown): value is CompanyShort | CompanyFull {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    'uid' in value &&\n    'name' in value &&\n    typeof (value as { uid?: unknown }).uid === 'string' &&\n    typeof (value as { name?: unknown }).name === 'string'\n  );\n}\n\n/**\n * Check if a value is a full company object\n */\nexport function isCompanyFull(value: unknown): value is CompanyFull {\n  return isCompany(value) && 'address' in value && 'purpose' in value;\n}\n\n/**\n * Check if a value is a legal form\n */\nexport function isLegalForm(value: unknown): value is LegalForm {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    'id' in value &&\n    'name' in value &&\n    typeof (value as { id?: unknown }).id === 'number' &&\n    typeof (value as { name?: unknown }).name === 'string'\n  );\n}\n\n/**\n * Check if a value is a BfsCommunity\n */\nexport function isBfsCommunity(value: unknown): value is BfsCommunity {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    'communityName' in value &&\n    'bfsId' in value &&\n    typeof (value as { communityName?: unknown }).communityName === 'string' &&\n    typeof (value as { bfsId?: unknown }).bfsId === 'number'\n  );\n}\n\n/**\n * Extract error message from various error types\n */\nexport function extractErrorMessage(error: unknown): string {\n  if (error instanceof Error) {\n    return error.message;\n  }\n\n  if (isZefixError(error)) {\n    return error.error?.message || 'Unknown error';\n  }\n\n  if (typeof error === 'string') {\n    return error;\n  }\n\n  if (typeof error === 'object' && error !== null && 'message' in error) {\n    return String((error as { message?: unknown }).message);\n  }\n\n  return 'An unknown error occurred';\n}\n\n/**\n * Check if a company is active\n */\nexport function isActiveCompany(company: CompanyShort | CompanyFull): boolean {\n  return company.status === 'ACTIVE';\n}\n\n/**\n * Format a UID for display\n */\nexport function formatUid(uid: string): string {\n  // Ensure format CHE-123.456.789\n  const cleaned = uid.replace(/[^0-9]/g, '');\n  if (cleaned.length === 9) {\n    return `CHE-${cleaned.slice(0, 3)}.${cleaned.slice(3, 6)}.${cleaned.slice(6)}`;\n  }\n  return uid;\n}\n\n/**\n * Validate a Swiss UID format\n */\nexport function isValidUid(uid: string): boolean {\n  // Match CHE-123.456.789 or CHE123456789 format\n  const pattern = /^CHE[-.]?\\d{3}\\.?\\d{3}\\.?\\d{3}$/i;\n  return pattern.test(uid);\n}\n\n/**\n * Swiss canton codes\n */\nexport const SWISS_CANTONS = [\n  'AG',\n  'AI',\n  'AR',\n  'BE',\n  'BL',\n  'BS',\n  'FR',\n  'GE',\n  'GL',\n  'GR',\n  'JU',\n  'LU',\n  'NE',\n  'NW',\n  'OW',\n  'SG',\n  'SH',\n  'SO',\n  'SZ',\n  'TG',\n  'TI',\n  'UR',\n  'VD',\n  'VS',\n  'ZG',\n  'ZH',\n] as const;\n\nexport type SwissCanton = (typeof SWISS_CANTONS)[number];\n\n/**\n * Check if a string is a valid Swiss canton code\n */\nexport function isValidCanton(canton: string): canton is SwissCanton {\n  return SWISS_CANTONS.includes(canton.toUpperCase() as SwissCanton);\n}\n\n/**\n * Language codes supported by ZEFIX\n */\nexport const ZEFIX_LANGUAGES = ['de', 'fr', 'it', 'en'] as const;\nexport type ZefixLanguage = (typeof ZEFIX_LANGUAGES)[number];\n\n/**\n * Check if a language is supported by ZEFIX\n */\nexport function isValidLanguage(lang: string): lang is ZefixLanguage {\n  return ZEFIX_LANGUAGES.includes(lang.toLowerCase() as ZefixLanguage);\n}\n\n/**\n * Get default language based on canton\n */\nexport function getDefaultLanguageForCanton(canton: SwissCanton): ZefixLanguage {\n  const frenchCantons: SwissCanton[] = ['FR', 'GE', 'JU', 'NE', 'VD', 'VS'];\n  const italianCantons: SwissCanton[] = ['TI'];\n\n  if (italianCantons.includes(canton)) return 'it';\n  if (frenchCantons.includes(canton)) return 'fr';\n  return 'de';\n}\n","// Re-export generated client and types\nexport { client } from './generated/client.gen';\nexport * from './generated/sdk.gen';\nexport type * from './generated/types.gen';\n\n// Import utilities\nimport { client } from './generated/client.gen';\nimport type { Config as GeneratedClientConfig } from './generated/client/types.gen';\nimport { toBase64 } from './utils/node-or-worker';\n\n// Export utilities\nexport { toBase64 } from './utils/node-or-worker';\nexport * from './utils/type-guards';\n\n// Types\nexport type Auth = {\n  username?: string;\n  password?: string;\n};\n\nexport type ClientConfig = {\n  baseUrl?: string;\n  auth?: Auth;\n  throttle?: { minIntervalMs?: number };\n  customFetch?: typeof fetch;\n};\n\n// State management\nlet lastRequestTime = 0;\nlet currentAuth: Auth | undefined;\nlet throttleConfig: { minIntervalMs?: number } | undefined;\n\n/**\n * Configure the ZEFIX API client\n * @throws Error if used in a browser environment (CORS restrictions)\n */\nexport const configureClient = (config: ClientConfig = {}) => {\n  // Browser environment guard\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    throw new Error(\n      'ZEFIX API Client Error: This client is for server-side use only (Node.js, Cloudflare Workers). ' +\n        'It cannot be used in browsers due to CORS restrictions on the ZEFIX API. ' +\n        'Please make API calls from your backend server.',\n    );\n  }\n\n  const {\n    baseUrl = 'https://www.zefix.admin.ch/ZefixPublicREST',\n    auth,\n    throttle,\n    customFetch,\n  } = config;\n\n  currentAuth = auth;\n  throttleConfig = throttle;\n\n  // Configure the client with base URL and custom fetch if provided\n  const clientConfig: Partial<GeneratedClientConfig> = { baseUrl };\n  if (customFetch) {\n    clientConfig.fetch = customFetch;\n  }\n\n  client.setConfig(clientConfig);\n\n  // Add request interceptor for auth and throttling\n  client.interceptors.request.use(async (req: Request) => {\n    // Clone headers so we can mutate them\n    const headers = new Headers(req.headers);\n\n    // Apply auth if configured\n    if (currentAuth?.username && currentAuth?.password) {\n      const credentials = toBase64(`${currentAuth.username}:${currentAuth.password}`);\n      headers.set('Authorization', `Basic ${credentials}`);\n    }\n\n    // Apply throttling if configured\n    if (throttleConfig?.minIntervalMs && throttleConfig.minIntervalMs > 0) {\n      const now = Date.now();\n      const timeSinceLastRequest = now - lastRequestTime;\n      const minInterval = throttleConfig.minIntervalMs;\n      if (timeSinceLastRequest < minInterval) {\n        await new Promise((resolve) => setTimeout(resolve, minInterval - timeSinceLastRequest));\n      }\n      lastRequestTime = Date.now();\n    }\n\n    // Return a new Request with updated headers\n    return new Request(req, { headers });\n  });\n};\n\n/**\n * Update authentication without reconfiguring the entire client\n */\nexport const setAuth = (auth: Auth | undefined) => {\n  currentAuth = auth;\n  configureClient({ auth });\n};\n\n/**\n * Error class for ZEFIX API errors with auth redaction\n */\nexport class ZefixError extends Error {\n  constructor(\n    public status: number,\n    public code?: string,\n    message?: string,\n    public body?: unknown,\n  ) {\n    super(message || `HTTP ${status}`);\n    this.name = 'ZefixError';\n\n    // Never log auth headers\n    if (this.body && typeof this.body === 'object' && 'headers' in this.body) {\n      const redacted = { ...this.body };\n      if ('headers' in redacted && typeof redacted.headers === 'object') {\n        const headers = { ...(redacted.headers as Record<string, string>) };\n        if ('Authorization' in headers) {\n          headers.Authorization = '[REDACTED]';\n        }\n        if ('authorization' in headers) {\n          headers.authorization = '[REDACTED]';\n        }\n        redacted.headers = headers;\n      }\n      this.body = redacted;\n    }\n  }\n}\n\n/**\n * Ensure response is OK, throw ZefixError if not\n */\nexport async function ensureOk<T>(res: { response: Response; data?: T }): Promise<T> {\n  if (!res.response.ok) {\n    throw new ZefixError(\n      res.response.status,\n      undefined,\n      `Request failed with status ${res.response.status}`,\n      res.data,\n    );\n  }\n  if (!res.data) {\n    throw new ZefixError(res.response.status, 'NO_DATA', 'Response contained no data', undefined);\n  }\n  return res.data;\n}\n\n// Curated high-value exports with better names\nexport {\n  list1 as getCantons,\n  showChid as getCompanyByChid,\n  showEhraid as getCompanyByEhraid,\n  showUid as getCompanyByUid,\n  list as getLegalForms,\n  byDate as getSogcByDate,\n  get as getSogcPublications,\n  search as searchCompanies,\n} from './generated/sdk.gen';\n"]}