// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { SearchData, SearchResponses, SearchErrors, GetData, GetResponses, GetErrors, ByDateData, ByDateResponses, ByDateErrors, ListData, ListResponses, ListErrors, ByBfsCommunityIdData, ByBfsCommunityIdResponses, ByBfsCommunityIdErrors, List1Data, List1Responses, List1Errors, ShowUidData, ShowUidResponses, ShowUidErrors, ShowEhraidData, ShowEhraidResponses, ShowEhraidErrors, ShowChidData, ShowChidResponses, ShowChidErrors, List2Data, List2Responses, List2Errors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Search for companies registered in the commercial register by different parameters
 */
export const search = <ThrowOnError extends boolean = false>(options: Options<SearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SearchResponses, SearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/company/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Search publication in the SOGC by publication number (SOGC-ID)
 */
export const get = <ThrowOnError extends boolean = false>(options: Options<GetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetResponses, GetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/sogc/{id}',
        ...options
    });
};

/**
 * Search publications in the SOGC by publication date
 */
export const byDate = <ThrowOnError extends boolean = false>(options: Options<ByDateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ByDateResponses, ByDateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/sogc/bydate/{date}',
        ...options
    });
};

/**
 * Get a list of the cantonal registries of commerce
 */
export const list = <ThrowOnError extends boolean = false>(options?: Options<ListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListResponses, ListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/registryOfCommerce',
        ...options
    });
};

/**
 * Get the cantonal registry of commerce by the bfsId of a BfsCommunity
 */
export const byBfsCommunityId = <ThrowOnError extends boolean = false>(options: Options<ByBfsCommunityIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ByBfsCommunityIdResponses, ByBfsCommunityIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/registryOfCommerce/byBfsCommunityId/{id}',
        ...options
    });
};

/**
 * Get a list of all legal forms and their codes
 */
export const list1 = <ThrowOnError extends boolean = false>(options?: Options<List1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<List1Responses, List1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/legalForm',
        ...options
    });
};

/**
 * Get detailed company info by UID
 */
export const showUid = <ThrowOnError extends boolean = false>(options: Options<ShowUidData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowUidResponses, ShowUidErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/company/uid/{id}',
        ...options
    });
};

/**
 * Get detailed company info by EHRA-ID (Internal company unique ID used by federal registry of commerce)
 */
export const showEhraid = <ThrowOnError extends boolean = false>(options: Options<ShowEhraidData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowEhraidResponses, ShowEhraidErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/company/ehraid/{id}',
        ...options
    });
};

/**
 * Get detailed company info by CH-Number (This number is no longer used in public)
 */
export const showChid = <ThrowOnError extends boolean = false>(options: Options<ShowChidData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowChidResponses, ShowChidErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/company/chid/{id}',
        ...options
    });
};

/**
 * Get a list of the political communes and their number according to the swiss official commune register
 */
export const list2 = <ThrowOnError extends boolean = false>(options?: Options<List2Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<List2Responses, List2Errors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/community',
        ...options
    });
};