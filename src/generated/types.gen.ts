// This file is auto-generated by @hey-api/openapi-ts

export type ErrorDetails = {
  /**
   * Type of error
   */
  type?:
    | 'INTERNAL_SERVER_ERROR'
    | 'INVALID_QUERY_WORDS'
    | 'INVALID_REQUEST_DATA'
    | 'RESULTLIST_TO_LARGE'
    | 'NOT_FOUND';
  /**
   * Details about the error
   */
  message?: string;
};

/**
 * Generic error response
 */
export type RestApiErrorResponse = {
  error?: ErrorDetails;
};

/**
 * Search Query
 */
export type CompanySearchQuery = {
  /**
   * Name of the company: begin of the company name, * can be used as wildcard, the search behaves like the exact search in the Zefix webapplication
   */
  name: string;
  /**
   * Internal legal form ID used by the commercial register
   * If a legal form ID is provided, only companies matching the given legal form are returned. The LegalForm endpoint provides the allowed values.
   */
  legalFormId?: number;
  /**
   * Public legal form code according to the data standard eCH-0097
   * If a legal form UID is provided, only companies matching the given legal form are returned. The LegalForm endpoint provides the allowed values.
   */
  legalFormUid?: string;
  /**
   * Internal office number of the cantonal registry of commerce
   * If a registryofcommerceID is given, only companies which have their seat in this registry district are returned. The RegistryOfCommerce endpoint provides all allowed values. Not allowed together with legalSeatId or canton
   */
  registryOfCommerceId?: number;
  /**
   * Number of the political commune according to the swiss official commune register
   * If a legal seat ID is given only companies with seat in the given political commune are returned. The Community endpoint provides all allowed values. Not allowed together with registryOfCommerceId or canton
   */
  legalSeatId?: number;
  /**
   * Canton
   * Not allowed together with registryOfCommerceId or legalSeatId
   */
  canton?: string;
  /**
   * only active companies?
   */
  activeOnly?: boolean;
};

/**
 * Basic company information
 */
export type CompanyShort = {
  /**
   * primary business name of the company
   */
  name?: string;
  /**
   * Internal company unique ID used by federal registry of commerce
   */
  ehraid?: number;
  /**
   * UID number, CHE...
   */
  uid?: string;
  /**
   * CH-ID (old CH-number with 13 digits, which is no longer used in public)
   */
  chid?: string;
  /**
   * Legal seat ID (commune number according to the swiss official commune register)
   */
  legalSeatId?: number;
  /**
   * Legal seat name (name of the political commune)
   */
  legalSeat?: string;
  /**
   * Internal office number of the cantonal registry of commerce
   */
  registryOfCommerceId?: number;
  /**
   * legal form
   */
  legalForm?: LegalForm;
  /**
   * Current company status (active, in liquidation, deleted)
   */
  status?: 'ACTIVE' | 'CANCELLED' | 'BEING_CANCELLED';
  /**
   * Date of the last publication in the SOGC
   */
  sogcDate?: string;
  /**
   * Date of deletion of the legal unit
   */
  deletionDate?: string;
};

/**
 * translated text
 */
export type DfieString = {
  /**
   * german translation
   */
  de?: string;
  /**
   * french translation
   */
  fr?: string;
  /**
   * italian translation
   */
  it?: string;
  /**
   * english translation
   */
  en?: string;
};

export type LegalForm = {
  /**
   * Internal legal form ID used by the commercial register
   */
  id?: number;
  /**
   * Public legal form code according to the data standard eCH-0097
   */
  uid?: string;
  /**
   * full name
   */
  name?: DfieString;
  /**
   * abbreviation
   */
  shortName?: DfieString;
};

/**
 * internal type of SOGC mutation
 */
export type MutationType = {
  id?: number;
  key?: string;
};

/**
 * Commercial register publication in the SOGC
 */
export type SogcPublication = {
  /**
   * Publication date of the SOGC
   */
  sogcDate?: string;
  /**
   * Publication number of the particular publication in the SOGC(SOGC-ID)
   */
  sogcId?: number;
  /**
   * Internal office number of the publishing cantonal registry of commerce
   */
  registryOfCommerceId?: number;
  /**
   * Canton of the publishing registry of commerce
   */
  registryOfCommerceCanton?: string;
  /**
   * Number of the daily register (of the publishing register of commerce)
   */
  registryOfCommerceJournalId?: number;
  /**
   * date of the daily register (of the publishing register of commerce)
   */
  registryOfCommerceJournalDate?: string;
  /**
   * Formatted text of the publication
   */
  message?: string;
  /**
   * mutation types
   */
  mutationTypes?: Array<MutationType>;
};

export type SogcPublicationAndCompanyShort = {
  sogcPublication?: SogcPublication;
  companyShort?: CompanyShort;
};

/**
 * Complete information about a cantonal registry of commerce
 */
export type RegistryOfCommerce = {
  /**
   * Internal office number of the cantonal registry of commerce
   */
  registryOfCommerceId?: number;
  /**
   * 2 character abbreviation of the canton
   */
  canton?: string;
  /**
   * Name of the cantonal registry of commerce
   */
  address1?: string;
  /**
   * Street and housenumber
   */
  address2?: string;
  /**
   * Post office box
   */
  address3?: string;
  /**
   * Swiss zip code and locality
   */
  address4?: string;
  /**
   * Official homepage of the cantonal registry of commerce
   */
  homepage?: string;
  /**
   * URL structure for displaying the excerpts from the cantonal commercial register of active companies (the UID # has to be structured as CHE-NNN.NNN.NNN)
   */
  url2?: string;
  /**
   * contact email of the registry of commerce
   */
  url3?: string;
  /**
   * URL structure for displaying the excerpts from the cantonal commercial register of deleted companies (the UID # has to be structured as CHE-NNN.NNN.NNN and the shabdatum (Publication date of the deletion in the SOGC) as YYYYMMDD)
   */
  url4?: string;
  /**
   *  currently not in use
   */
  url5?: string;
};

export type Address = {
  /**
   * organisation name
   */
  organisation?: string;
  /**
   * care of
   */
  careOf?: string;
  /**
   * street
   */
  street?: string;
  /**
   * house number
   */
  houseNumber?: string;
  /**
   * address addon
   */
  addon?: string;
  /**
   * PO box
   */
  poBox?: string;
  /**
   * city
   */
  city?: string;
  /**
   * zip code
   */
  swissZipCode?: string;
};

/**
 * extended version of CompanyShort
 */
export type CompanyFull = {
  /**
   * primary business name of the company
   */
  name?: string;
  /**
   * Internal company unique ID used by federal registry of commerce
   */
  ehraid?: number;
  /**
   * UID number, CHE...
   */
  uid?: string;
  /**
   * CH-ID (old CH-number with 13 digits, which is no longer used in public)
   */
  chid?: string;
  /**
   * Legal seat ID (commune number according to the swiss official commune register)
   */
  legalSeatId?: number;
  /**
   * Legal seat name (name of the political commune)
   */
  legalSeat?: string;
  /**
   * Internal office number of the cantonal registry of commerce
   */
  registryOfCommerceId?: number;
  /**
   * legal form
   */
  legalForm?: LegalForm;
  /**
   * Current company status (active, in liquidation, deleted)
   */
  status?: 'ACTIVE' | 'CANCELLED' | 'BEING_CANCELLED';
  /**
   * Date of the last publication in the SOGC
   */
  sogcDate?: string;
  /**
   * Date of deletion of the legal unit
   */
  deletionDate?: string;
  /**
   * company name translations
   */
  translation?: Array<string>;
  /**
   * purpose
   */
  purpose?: string;
  /**
   * SOGC published publications regarding the registry of commerce
   */
  sogcPub?: Array<SogcPublication>;
  /**
   * address
   */
  address?: Address;
  /**
   * 2 character abbreviation of the canton
   */
  canton?: string;
  /**
   * nominal capital (only available for corporations)
   */
  capitalNominal?: string;
  /**
   * currency of the nominal capital
   */
  capitalCurrency?: string;
  /**
   * head offices
   */
  headOffices?: Array<CompanyShort>;
  /**
   * further head offices
   */
  furtherHeadOffices?: Array<CompanyShort>;
  /**
   * branch offices
   */
  branchOffices?: Array<CompanyShort>;
  /**
   * has taken over
   */
  hasTakenOver?: Array<CompanyShort>;
  /**
   * was taken over by
   */
  wasTakenOverBy?: Array<CompanyShort>;
  /**
   * audit companies
   */
  auditCompanies?: Array<CompanyShort>;
  /**
   * Previous names of the company
   */
  oldNames?: Array<CompanyOldName>;
  /**
   * Link to the excerpt of the cantonal commercial register (URL), based on RegistryOfCommerce url2/url4
   */
  cantonalExcerptWeb?: string;
  /**
   * Link to the detail view in Zefix (URL)
   */
  zefixDetailWeb?: DfieString;
};

/**
 * Previous names of the company
 */
export type CompanyOldName = {
  /**
   * primary name
   */
  name?: string;
  /**
   * The sequence number provides a hint about the age of the entry. A bigger number is older
   */
  sequenceNr?: number;
  /**
   * translations
   */
  translation?: Array<string>;
};

export type BfsCommunity = {
  /**
   * Number of commune according to the swiss official commune register
   */
  bfsId?: number;
  /**
   * Canton
   */
  canton?: string;
  /**
   * name of the political commune
   */
  name?: string;
  /**
   * Internal office number of the cantonal registry of commerce
   */
  registryOfCommerceId?: number;
};

export type SearchData = {
  body: CompanySearchQuery;
  path?: never;
  query?: never;
  url: '/api/v1/company/search';
};

export type SearchErrors = {
  /**
   * Bad Request
   */
  400: RestApiErrorResponse;
  /**
   * Not Found
   */
  404: RestApiErrorResponse;
  /**
   * Internal Server Error
   */
  500: RestApiErrorResponse;
};

export type SearchError = SearchErrors[keyof SearchErrors];

export type SearchResponses = {
  /**
   * OK
   */
  200: Array<CompanyShort>;
};

export type SearchResponse = SearchResponses[keyof SearchResponses];

export type GetData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: '/api/v1/sogc/{id}';
};

export type GetErrors = {
  /**
   * Bad Request
   */
  400: RestApiErrorResponse;
  /**
   * Not Found
   */
  404: RestApiErrorResponse;
  /**
   * Internal Server Error
   */
  500: RestApiErrorResponse;
};

export type GetError = GetErrors[keyof GetErrors];

export type GetResponses = {
  /**
   * OK
   */
  200: SogcPublicationAndCompanyShort;
};

export type GetResponse = GetResponses[keyof GetResponses];

export type ByDateData = {
  body?: never;
  path: {
    date: string;
  };
  query?: never;
  url: '/api/v1/sogc/bydate/{date}';
};

export type ByDateErrors = {
  /**
   * Bad Request
   */
  400: RestApiErrorResponse;
  /**
   * Not Found
   */
  404: RestApiErrorResponse;
  /**
   * Internal Server Error
   */
  500: RestApiErrorResponse;
};

export type ByDateError = ByDateErrors[keyof ByDateErrors];

export type ByDateResponses = {
  /**
   * OK
   */
  200: Array<SogcPublicationAndCompanyShort>;
};

export type ByDateResponse = ByDateResponses[keyof ByDateResponses];

export type ListData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/registryOfCommerce';
};

export type ListErrors = {
  /**
   * Bad Request
   */
  400: RestApiErrorResponse;
  /**
   * Not Found
   */
  404: RestApiErrorResponse;
  /**
   * Internal Server Error
   */
  500: RestApiErrorResponse;
};

export type ListError = ListErrors[keyof ListErrors];

export type ListResponses = {
  /**
   * OK
   */
  200: Array<RegistryOfCommerce>;
};

export type ListResponse = ListResponses[keyof ListResponses];

export type ByBfsCommunityIdData = {
  body?: never;
  path: {
    /**
     * bfsId of the BfsCommunity
     */
    id: string;
  };
  query?: never;
  url: '/api/v1/registryOfCommerce/byBfsCommunityId/{id}';
};

export type ByBfsCommunityIdErrors = {
  /**
   * Bad Request
   */
  400: RestApiErrorResponse;
  /**
   * Not Found
   */
  404: RestApiErrorResponse;
  /**
   * Internal Server Error
   */
  500: RestApiErrorResponse;
};

export type ByBfsCommunityIdError = ByBfsCommunityIdErrors[keyof ByBfsCommunityIdErrors];

export type ByBfsCommunityIdResponses = {
  /**
   * OK
   */
  200: RegistryOfCommerce;
};

export type ByBfsCommunityIdResponse = ByBfsCommunityIdResponses[keyof ByBfsCommunityIdResponses];

export type List1Data = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/legalForm';
};

export type List1Errors = {
  /**
   * Bad Request
   */
  400: RestApiErrorResponse;
  /**
   * Not Found
   */
  404: RestApiErrorResponse;
  /**
   * Internal Server Error
   */
  500: RestApiErrorResponse;
};

export type List1Error = List1Errors[keyof List1Errors];

export type List1Responses = {
  /**
   * OK
   */
  200: Array<LegalForm>;
};

export type List1Response = List1Responses[keyof List1Responses];

export type ShowUidData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/company/uid/{id}';
};

export type ShowUidErrors = {
  /**
   * Bad Request
   */
  400: RestApiErrorResponse;
  /**
   * Not Found
   */
  404: RestApiErrorResponse;
  /**
   * Internal Server Error
   */
  500: RestApiErrorResponse;
};

export type ShowUidError = ShowUidErrors[keyof ShowUidErrors];

export type ShowUidResponses = {
  /**
   * OK
   */
  200: Array<CompanyFull>;
};

export type ShowUidResponse = ShowUidResponses[keyof ShowUidResponses];

export type ShowEhraidData = {
  body?: never;
  path: {
    id: number;
  };
  query?: never;
  url: '/api/v1/company/ehraid/{id}';
};

export type ShowEhraidErrors = {
  /**
   * Bad Request
   */
  400: RestApiErrorResponse;
  /**
   * Not Found
   */
  404: RestApiErrorResponse;
  /**
   * Internal Server Error
   */
  500: RestApiErrorResponse;
};

export type ShowEhraidError = ShowEhraidErrors[keyof ShowEhraidErrors];

export type ShowEhraidResponses = {
  /**
   * OK
   */
  200: CompanyFull;
};

export type ShowEhraidResponse = ShowEhraidResponses[keyof ShowEhraidResponses];

export type ShowChidData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/company/chid/{id}';
};

export type ShowChidErrors = {
  /**
   * Bad Request
   */
  400: RestApiErrorResponse;
  /**
   * Not Found
   */
  404: RestApiErrorResponse;
  /**
   * Internal Server Error
   */
  500: RestApiErrorResponse;
};

export type ShowChidError = ShowChidErrors[keyof ShowChidErrors];

export type ShowChidResponses = {
  /**
   * OK
   */
  200: Array<CompanyFull>;
};

export type ShowChidResponse = ShowChidResponses[keyof ShowChidResponses];

export type List2Data = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/community';
};

export type List2Errors = {
  /**
   * Bad Request
   */
  400: RestApiErrorResponse;
  /**
   * Not Found
   */
  404: RestApiErrorResponse;
  /**
   * Internal Server Error
   */
  500: RestApiErrorResponse;
};

export type List2Error = List2Errors[keyof List2Errors];

export type List2Responses = {
  /**
   * OK
   */
  200: Array<BfsCommunity>;
};

export type List2Response = List2Responses[keyof List2Responses];

export type ClientOptions = {
  baseUrl: 'https://www.zefix.admin.ch/ZefixPublicREST' | (string & {});
};
